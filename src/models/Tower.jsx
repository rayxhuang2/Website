/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect } from "react";
import { OrbitControls, Preload, useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { a } from '@react-spring/three';

import towerScene from '../assets/3d/towerclean.glb';

export function Tower({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) {
  const towerRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(towerScene);

  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches 
    ? e.touches[0].clientX 
    : e.clientX; 

    lastX.current = clientX;
  }
  
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if(isRotating) {
      const clientX = e.touches 
      ? e.touches[0].clientX 
      : e.clientX; 
  
      const delta = (clientX - lastX.current) / viewport.width;
  
      towerRef.current.rotation.y += delta * 0.01 * Math.PI
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);

    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
    }

  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  useFrame (() => {
    if(!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if(Math.abs(rotationSpeed.current < 0.001)) {
        rotationSpeed.current = 0;
      }
      towerRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = towerRef.current.rotation.y;

      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    }
  });



  return (
    <a.group ref={towerRef} {...props}>
      <mesh
        geometry={nodes.polySurface6.geometry}
        material={materials.lambert2}
        position={[0,0,0]}
        rotation={[1.57, 0, 3.5]}
        scale={0.1}
      />
    </a.group>
  );
}
// useGLTF.preload("/towerclean.glb");

export default Tower;